/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TelaVenda.java
 *
 * Created on 06/10/2010, 12:08:01
 */
package telas.Vendas;


import Controller.AcessoController;
import Controller.ClienteController;
import Controller.CodigoBarrasController;
import Controller.ContasReceberController;
import Controller.EntregaController;
import Controller.FormaPagamentoController;
import Controller.UsuariosController;
import Controller.VendaController;
import Interface.FormaPagamentoTableModel;
import Interface.FrmConsultaProduto;
import Interface.FrmDadosCliente;
import Interface.FrmRetirada;
import Interface.FrmSelecionarClienteTerminal;
import Interface.TerminalVendasTableModel;
import Regras.Config;
import Regras.Formatacao;
import Regras.ImprimirEmissao;
import Regras.ImprimirVendaPrazo;
import Regras.ProdutoVenda;
import Regras.UsuarioLogado;
import controler.ItelaVenda;
import controler.RecebimentoBean;
import facade.*;
import java.awt.Color;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import model.*;
import negocios.*;
import telas.ControleCheque.FrmControleCheques;
import telas.Fechamneto.FrmFechamentoCaixa;
import telas.contasReceber.ConsultaContasReceberTableModel;
import telas.contasReceber.ContasReceberBean;
import telas.contasReceber.CreditoBean;
import telas.contasReceber.FrmConsultaClientes;
import telas.contasReceber.FrmConsultarContasReceber;
import telas.formaRecebimento.FrmRecebimentoCartao;

    
/**
 *
 * @author Woverine
 */
public final class FrmTelaVenda extends javax.swing.JFrame implements  ItelaVenda{




    /** Creates new form TelaVenda */
    private List<ProdutoVenda> listaProdutoVenda;
    private TelaVendaTableModel model;
    private FormaPagamentoTableModel modelForma;
    private Vendas venda;
    private double quantidadeVenda =1.0;
    private int fechamento=0;
    private List<Formapagamento> listaFormaPagamento = new ArrayList<Formapagamento>();
    private int devolucao = 0;
    private Config config = new Config();
    private Fechacaixa fechacaixa = new Fechacaixa();
    private int teclaF4=0;
    private ECFBematech ecf;
    private Vendedor vendedor = new Vendedor();
    private String mensagemCupom;
    private float novoValor;
    private int numeroParcelas;
    ConsultaContasReceberTableModel modelContasReceber;
    private int tipoOperacao; //1-Venda  2-ContasReceber
    private RecebimentoBean recebimentoBean;
    private UsuarioLogado usuarioLogado;
    private double trocoDevolucao;



    public FrmTelaVenda(Fechacaixa fechaCaixa, Config config, UsuarioLogado usuarioLogado) {
        this.usuarioLogado = usuarioLogado;
        this.config = config;
        this.tipoOperacao=1;
        this.novoValor = 0;
        this.numeroParcelas = 1;
        this.fechacaixa = fechaCaixa;
         ecf = new ECFBematech();
        gerarMensagemECF(ecf.verificaImpressoraLigada());
        if (!(ecf.verificarSerieECF(config.getEmissorECF().getNumeroSerie()))){
            JOptionPane.showMessageDialog(null,"Equipamento ECF não autorizado");
            System.exit(0);
        }
        
        listaProdutoVenda = new ArrayList<ProdutoVenda>();
        model = new TelaVendaTableModel(listaProdutoVenda);
        initComponents();
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        MenuTeclasjPanel.setVisible(true);
        this.setLocationRelativeTo(null);
        gerarJTable();
        formaPagamentojPanel.setVisible(false);        
        operadorjLabel2.setText("Operador : " + usuarioLogado.getUsuario().getNome());
        ecfjLabel3.setText("Nº do ECF : " + config.getEmissorECF().getNumeroSerie());
        modeloECFjLabel.setText("Modelo ECF : " + config.getEmissorECF().getModelo());
        sistemajLabel.setText("Sistema : " + config.getVersaoSitema());
        this.setTitle("Venda de Produtos");
        this.setVisible(true);
        //System.loadLibrary ("c:\\t\\BemaFI32.dll");  
       
        
    }

    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableVenda = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ValorUnitariojTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        CodigojTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        SubTotaljTextField = new javax.swing.JTextField();
        QuantidadejFormattedTextField = new javax.swing.JFormattedTextField();
        jPanel3 = new javax.swing.JPanel();
        formaPagamentojPanel = new javax.swing.JPanel();
        valorTotalPagarjTextField = new javax.swing.JTextField();
        valorFormajTextField = new javax.swing.JTextField();
        valorAcrescimojLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        codigoFormajTextField = new javax.swing.JTextField();
        descricaoFormajTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        valorPagarljTextField = new javax.swing.JTextField();
        valorAcrescimojTextField = new javax.swing.JTextField();
        valorDescontojTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        valorDiferencajTextField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        valorTrocojTextField = new javax.swing.JTextField();
        percentualDescontojTextField = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        formaPagamentojTable1 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        sistemajLabel = new javax.swing.JLabel();
        operadorjLabel2 = new javax.swing.JLabel();
        ecfjLabel3 = new javax.swing.JLabel();
        modeloECFjLabel = new javax.swing.JLabel();
        MenuTeclasjPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        confirmarVendajMenuItem = new javax.swing.JMenuItem();
        CancelarVendajMenuItem = new javax.swing.JMenuItem();
        excluirProdutojMenuItem = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        menuFiscal02jMenu = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem23 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        menuFiscaljMenu = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Venda de Produtos");
        setMinimumSize(new java.awt.Dimension(1000, 720));
        setName("TelaVenda"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTableVenda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Item", "Codigo", "Descricao", "Unidade", "Quantidade", "Vlr. Unitario", "Vlr. Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableVenda.setColumnSelectionAllowed(true);
        jTableVenda.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableVenda.setShowVerticalLines(false);
        jTableVenda.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableVenda);
        jTableVenda.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTableVenda.getColumnModel().getColumnCount() > 0) {
            jTableVenda.getColumnModel().getColumn(0).setResizable(false);
            jTableVenda.getColumnModel().getColumn(0).setPreferredWidth(10);
            jTableVenda.getColumnModel().getColumn(1).setResizable(false);
            jTableVenda.getColumnModel().getColumn(1).setPreferredWidth(50);
            jTableVenda.getColumnModel().getColumn(2).setResizable(false);
            jTableVenda.getColumnModel().getColumn(2).setPreferredWidth(400);
            jTableVenda.getColumnModel().getColumn(3).setResizable(false);
            jTableVenda.getColumnModel().getColumn(3).setPreferredWidth(20);
            jTableVenda.getColumnModel().getColumn(4).setResizable(false);
            jTableVenda.getColumnModel().getColumn(4).setPreferredWidth(30);
            jTableVenda.getColumnModel().getColumn(5).setResizable(false);
            jTableVenda.getColumnModel().getColumn(5).setPreferredWidth(50);
            jTableVenda.getColumnModel().getColumn(6).setResizable(false);
            jTableVenda.getColumnModel().getColumn(6).setPreferredWidth(50);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 960, 250));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, 980, 260));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Quantidade");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        ValorUnitariojTextField.setEditable(false);
        ValorUnitariojTextField.setBackground(new java.awt.Color(0, 51, 204));
        ValorUnitariojTextField.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ValorUnitariojTextField.setForeground(new java.awt.Color(255, 255, 255));
        ValorUnitariojTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        ValorUnitariojTextField.setText("0.00");
        jPanel2.add(ValorUnitariojTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 105, 140, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Valor Unitário");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, -1, -1));

        CodigojTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        CodigojTextField.setForeground(new java.awt.Color(0, 153, 51));
        CodigojTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        CodigojTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CodigojTextFieldActionPerformed(evt);
            }
        });
        CodigojTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                CodigojTextFieldKeyPressed(evt);
            }
        });
        jPanel2.add(CodigojTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 35, 280, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Código do Produto");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Subtotal");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, -1, -1));

        SubTotaljTextField.setBackground(new java.awt.Color(255, 51, 51));
        SubTotaljTextField.setEditable(false);
        SubTotaljTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        SubTotaljTextField.setForeground(new java.awt.Color(255, 255, 255));
        SubTotaljTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        SubTotaljTextField.setText("0.00");
        jPanel2.add(SubTotaljTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 175, 280, -1));

        QuantidadejFormattedTextField.setBackground(new java.awt.Color(0, 51, 255));
        QuantidadejFormattedTextField.setForeground(new java.awt.Color(255, 255, 255));
        QuantidadejFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("####.000"))));
        QuantidadejFormattedTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        QuantidadejFormattedTextField.setText("1.000");
        QuantidadejFormattedTextField.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jPanel2.add(QuantidadejFormattedTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 105, 100, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 320, 230));

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        formaPagamentojPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        valorTotalPagarjTextField.setEditable(false);
        valorTotalPagarjTextField.setBackground(new java.awt.Color(255, 51, 51));
        valorTotalPagarjTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        valorTotalPagarjTextField.setForeground(new java.awt.Color(255, 255, 255));
        valorTotalPagarjTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        valorTotalPagarjTextField.setText("0.00");
        formaPagamentojPanel.add(valorTotalPagarjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 190, -1));

        valorFormajTextField.setBackground(new java.awt.Color(0, 51, 204));
        valorFormajTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        valorFormajTextField.setForeground(new java.awt.Color(255, 255, 255));
        valorFormajTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        valorFormajTextField.setText("0.00");
        valorFormajTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                valorFormajTextFieldKeyPressed(evt);
            }
        });
        formaPagamentojPanel.add(valorFormajTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 25, 160, -1));

        valorAcrescimojLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        valorAcrescimojLabel.setText("Valor Acrescimo");
        formaPagamentojPanel.add(valorAcrescimojLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 65, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Descrição Forma de Pagamento");
        formaPagamentojPanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 0, -1, -1));

        codigoFormajTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        codigoFormajTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        codigoFormajTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                codigoFormajTextFieldKeyPressed(evt);
            }
        });
        formaPagamentojPanel.add(codigoFormajTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 25, 96, -1));

        descricaoFormajTextField.setEditable(false);
        descricaoFormajTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        descricaoFormajTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        formaPagamentojPanel.add(descricaoFormajTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(114, 25, 320, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Valor Forma Pagto");
        formaPagamentojPanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 0, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Código");
        formaPagamentojPanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("Valor Desconto");
        formaPagamentojPanel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 65, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("Total Pagar");
        formaPagamentojPanel.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 65, -1, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel13.setText("Valor a Pagar");
        formaPagamentojPanel.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, -1, -1));

        valorPagarljTextField.setBackground(new java.awt.Color(255, 51, 51));
        valorPagarljTextField.setEditable(false);
        valorPagarljTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        valorPagarljTextField.setForeground(new java.awt.Color(255, 255, 255));
        valorPagarljTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        valorPagarljTextField.setText("0.00");
        formaPagamentojPanel.add(valorPagarljTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 155, 190, -1));

        valorAcrescimojTextField.setBackground(new java.awt.Color(0, 51, 204));
        valorAcrescimojTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        valorAcrescimojTextField.setForeground(new java.awt.Color(255, 255, 255));
        valorAcrescimojTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        valorAcrescimojTextField.setText("0.00");
        valorAcrescimojTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valorAcrescimojTextFieldFocusGained(evt);
            }
        });
        valorAcrescimojTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                valorAcrescimojTextFieldKeyPressed(evt);
            }
        });
        formaPagamentojPanel.add(valorAcrescimojTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 90, 120, -1));

        valorDescontojTextField.setBackground(new java.awt.Color(0, 51, 204));
        valorDescontojTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        valorDescontojTextField.setForeground(new java.awt.Color(255, 255, 255));
        valorDescontojTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        valorDescontojTextField.setText("0.00");
        valorDescontojTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valorDescontojTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                valorDescontojTextFieldFocusLost(evt);
            }
        });
        valorDescontojTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                valorDescontojTextFieldKeyPressed(evt);
            }
        });
        formaPagamentojPanel.add(valorDescontojTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, 130, -1));

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel14.setText("Valor Diferença");
        formaPagamentojPanel.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 130, -1, -1));

        valorDiferencajTextField.setEditable(false);
        valorDiferencajTextField.setBackground(new java.awt.Color(0, 51, 204));
        valorDiferencajTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        valorDiferencajTextField.setForeground(new java.awt.Color(255, 255, 255));
        valorDiferencajTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        valorDiferencajTextField.setText("0.00");
        formaPagamentojPanel.add(valorDiferencajTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 155, 190, -1));

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setText("Valor Troco");
        formaPagamentojPanel.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 130, -1, -1));

        valorTrocojTextField.setBackground(new java.awt.Color(0, 51, 204));
        valorTrocojTextField.setEditable(false);
        valorTrocojTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        valorTrocojTextField.setForeground(new java.awt.Color(255, 255, 255));
        valorTrocojTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        valorTrocojTextField.setText("0.00");
        formaPagamentojPanel.add(valorTrocojTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 155, 190, -1));

        percentualDescontojTextField.setBackground(new java.awt.Color(0, 51, 204));
        percentualDescontojTextField.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        percentualDescontojTextField.setForeground(new java.awt.Color(255, 255, 255));
        percentualDescontojTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        percentualDescontojTextField.setText("0.00");
        percentualDescontojTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                percentualDescontojTextFieldFocusGained(evt);
            }
        });
        percentualDescontojTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                percentualDescontojTextFieldKeyPressed(evt);
            }
        });
        formaPagamentojPanel.add(percentualDescontojTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 90, 120, -1));

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel27.setText("% Desconto");
        formaPagamentojPanel.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 65, -1, -1));

        formaPagamentojTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Codigo", "Forma", "Nº Parcelas", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        formaPagamentojTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(formaPagamentojTable1);
        if (formaPagamentojTable1.getColumnModel().getColumnCount() > 0) {
            formaPagamentojTable1.getColumnModel().getColumn(0).setResizable(false);
            formaPagamentojTable1.getColumnModel().getColumn(0).setPreferredWidth(5);
            formaPagamentojTable1.getColumnModel().getColumn(1).setResizable(false);
            formaPagamentojTable1.getColumnModel().getColumn(1).setPreferredWidth(100);
            formaPagamentojTable1.getColumnModel().getColumn(2).setResizable(false);
            formaPagamentojTable1.getColumnModel().getColumn(3).setResizable(false);
            formaPagamentojTable1.getColumnModel().getColumn(3).setPreferredWidth(10);
        }

        formaPagamentojPanel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 610, 170));

        jPanel3.add(formaPagamentojPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(9, 12, 620, 380));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 10, 640, 400));

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sistemajLabel.setText("Sistema");
        jPanel4.add(sistemajLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));

        operadorjLabel2.setText("Nome do Operador");
        jPanel4.add(operadorjLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        ecfjLabel3.setText("Nº ECF");
        jPanel4.add(ecfjLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        modeloECFjLabel.setText("Sistema");
        jPanel4.add(modeloECFjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 320, 160));

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Teclas de Funções");

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel12.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 255));
        jLabel12.setText("F2 - Consulta Produto");

        jLabel16.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 0, 255));
        jLabel16.setText("F3 - Cancela Item");

        jLabel17.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 255));
        jLabel17.setText("F3 - Cancela Item");

        jLabel18.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(0, 0, 255));
        jLabel18.setText("F5 - Cancela Venda");

        jLabel19.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 0, 255));
        jLabel19.setText("F6 - Controle Cheques");

        jLabel20.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 0, 255));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(jLabel16)
                .addGap(18, 18, 18)
                .addComponent(jLabel17)
                .addGap(18, 18, 18)
                .addComponent(jLabel18)
                .addGap(18, 18, 18)
                .addComponent(jLabel19)
                .addGap(18, 18, 18)
                .addComponent(jLabel20)
                .addContainerGap(93, Short.MAX_VALUE))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel21.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(0, 0, 255));
        jLabel21.setText("F8 - Devolução de Produtos");

        jLabel22.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(0, 0, 255));
        jLabel22.setText("F9 - Buscar Venda Espera");

        jLabel23.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(0, 0, 255));
        jLabel23.setText("CTRL + R - Registrar Retiradas");

        jLabel24.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(0, 0, 255));
        jLabel24.setText("CRTL + D - Valor do Desconto");

        jLabel25.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(0, 0, 255));
        jLabel25.setText("CTRL + A - Valor do Acrescimo");

        jLabel26.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(0, 0, 255));
        jLabel26.setText("F12 - Finalizar Venda");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21)
                    .addComponent(jLabel22)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24)
                    .addComponent(jLabel25)
                    .addComponent(jLabel26))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addGap(18, 18, 18)
                .addComponent(jLabel22)
                .addGap(18, 18, 18)
                .addComponent(jLabel23)
                .addGap(18, 18, 18)
                .addComponent(jLabel24)
                .addGap(18, 18, 18)
                .addComponent(jLabel25)
                .addGap(18, 18, 18)
                .addComponent(jLabel26)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout MenuTeclasjPanelLayout = new javax.swing.GroupLayout(MenuTeclasjPanel);
        MenuTeclasjPanel.setLayout(MenuTeclasjPanelLayout);
        MenuTeclasjPanelLayout.setHorizontalGroup(
            MenuTeclasjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuTeclasjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MenuTeclasjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MenuTeclasjPanelLayout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        MenuTeclasjPanelLayout.setVerticalGroup(
            MenuTeclasjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MenuTeclasjPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MenuTeclasjPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        getContentPane().add(MenuTeclasjPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 0, -1, 360));

        jMenu1.setText("Menu Sistema");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        confirmarVendajMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, 0));
        confirmarVendajMenuItem.setText("Confirmar");
        confirmarVendajMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmarVendajMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(confirmarVendajMenuItem);

        CancelarVendajMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        CancelarVendajMenuItem.setText("Cancelar Venda");
        CancelarVendajMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelarVendajMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(CancelarVendajMenuItem);

        excluirProdutojMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F3, 0));
        excluirProdutojMenuItem.setText("Excluir Produto");
        excluirProdutojMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluirProdutojMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(excluirProdutojMenuItem);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jMenuItem11.setText("Conuslta Produto");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem11);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItem1.setText("Cancelar Forma Pagamento");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F12, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Fechamento Caixa");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem12.setText("Desconto");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem12);

        jMenuItem13.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem13.setText("Acrescimo");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem13);

        jMenuItem15.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F9, 0));
        jMenuItem15.setText("Cliente Terminal");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem15);

        jMenuItem17.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem17.setText("Retiradas");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem17);

        jMenuItem19.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, 0));
        jMenuItem19.setText("Novo Valor");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem19);

        jMenuItem20.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        jMenuItem20.setText("Controle de Cheques");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem20);

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem9.setText("Contas a Receber");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem9);

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem10.setText("Emitir Comprovante de Credito");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem10);

        jMenuBar1.add(jMenu1);
        jMenuBar1.add(jMenu2);
        jMenuBar1.add(jMenu4);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Somente Cupm Fiscal");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        menuFiscal02jMenu.add(jMenuItem4);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        jMenuItem5.setText("Cupom Fiscal");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        menuFiscal02jMenu.add(jMenuItem5);

        jMenuItem22.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem22.setText("Ultimo Cupom Fiscal");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        menuFiscal02jMenu.add(jMenuItem22);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem2.setText("Emissao");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        menuFiscal02jMenu.add(jMenuItem2);

        jMenuItem8.setText("Programa Forma de Pagamento");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        menuFiscal02jMenu.add(jMenuItem8);

        jMenuItem21.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem21.setText("Cupom Fiscal");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        menuFiscal02jMenu.add(jMenuItem21);

        jMenuItem23.setText("MD5");
        jMenuItem23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem23ActionPerformed(evt);
            }
        });
        menuFiscal02jMenu.add(jMenuItem23);

        jMenuItem14.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F7, 0));
        jMenuItem14.setText("Enviar Espera");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        menuFiscal02jMenu.add(jMenuItem14);

        jMenuBar1.add(menuFiscal02jMenu);

        menuFiscaljMenu.setText("Menu Fiscal");
        menuFiscaljMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFiscaljMenuActionPerformed(evt);
            }
        });

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Menu Fiscal - PAF-ECF");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        menuFiscaljMenu.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Redução Z");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        menuFiscaljMenu.add(jMenuItem7);

        jMenuItem16.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem16.setText("Dados do Cliente Cupom Fiscal");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        menuFiscaljMenu.add(jMenuItem16);

        jMenuBar1.add(menuFiscaljMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CodigojTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CodigojTextFieldKeyPressed
        if ((evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) && (CodigojTextField.getText().length() > 0)) {
            teclaF4=4;
            gerarQuantidadeCodigo();
            if (this.venda == null) {
                getVendedor(config.getVendedor());
                this.mensagemCupom = "Obrigado, volte sempre !!!";
                venda = new Vendas(config, this.fechacaixa, this.vendedor, this.teclaF4, this.fechamento, this.devolucao);
                this.venda.getVenda().setCaixa(config.getIdCaixa());
                this.venda.getVenda().setOperador(this.fechacaixa.getOperador());
                if (this.getTitle().equalsIgnoreCase("Venda de Produto")){
                    if (teclaF4==0){
                        teclaF4=4;
                    }
                }
                if (teclaF4 > 0) {
                    gerarMensagemECF(ecf.abreCupomFiscal());
                }
            }
            try {
                String codigo = CodigojTextField.getText();
                if(codigo.length()>10){
                    codigo = verificarCodigoBarras(codigo);
                }
                QuantidadejFormattedTextField.setValue(quantidadeVenda);
                venda.vendeItem(Integer.parseInt(codigo), quantidadeVenda, this.config.getEmpresa().getIdempresa(), novoValor, 0,0, this.vendedor.getIdvendedor());
                this.novoValor=0;
                if (teclaF4 > 0) {
                    gerarMensagemECF(ecf.vendeItem(this.venda.retornaUltimaItemVendido(), config.getMarcarimpressora()));
                }
                ValorUnitariojTextField.setText(Formatacao.foramtarFloatString(venda.getListaProdutoVenda().get(venda.getListaProdutoVenda().size() - 1).getValorUnitario()));
                SubTotaljTextField.setText(Formatacao.foramtarFloatString(venda.TotalVenda()-venda.getValorDesconto()));
                CodigojTextField.setText(null);
                this.listaProdutoVenda = venda.getListaProdutoVenda();
                model = new TelaVendaTableModel(this.listaProdutoVenda);
                gerarJTable();
                quantidadeVenda = 1.0;
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Erro ao Vender Produto\n " + ex);
            }

        }
    }//GEN-LAST:event_CodigojTextFieldKeyPressed

    private void confirmarVendajMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmarVendajMenuItemActionPerformed
        if (tipoOperacao==1){
            confimarOperacaoVendas();
        }else if (tipoOperacao==2){
            confirmarOperacaoContasReceber();
        }
    }//GEN-LAST:event_confirmarVendajMenuItemActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        
        valorDescontojTextField.requestFocus();
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void valorDescontojTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_valorDescontojTextFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            if (valorDescontojTextField.getText().length() > 0) {
                calcularValorDesconto();
            }
        }
    }//GEN-LAST:event_valorDescontojTextFieldKeyPressed

    private void valorAcrescimojTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_valorAcrescimojTextFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
           this.venda.calcularAcrescimo(Formatacao.formatarStringfloat(valorAcrescimojTextField.getText()));
           valorPagarljTextField.setText(Formatacao.foramtarFloatString(this.venda.TotalPagar()));
           if (tipoOperacao==1){
               calcularDiferencaTrocoVenda();
           }else if (tipoOperacao==2){
               calcularDiferencaTrocoContasReceber();
           }
        }
    }//GEN-LAST:event_valorAcrescimojTextFieldKeyPressed

    private void codigoFormajTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codigoFormajTextFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            int idForma = Integer.parseInt(codigoFormajTextField.getText());
            for (int i=0;i<listaFormaPagamento.size();i++){
                if (listaFormaPagamento.get(i).getIdformaPagamento()==idForma){
                    descricaoFormajTextField.setText(listaFormaPagamento.get(i).getDescricao());
                    i = 1000;
                }
            }            
            valorFormajTextField.requestFocus();
            valorFormajTextField.selectAll();
            if (tipoOperacao==1){
                gerarTableModelFormaPagamentoVendas();
            }else if (tipoOperacao==2){
                gerarTableModelFormaPagamentoContasReceber();
            }
            if (idForma==10){
                double sValor = Formatacao.formatarStringDouble(valorDiferencajTextField.getText());
                if (sValor>0){
                    new FrmRecebimentoCartao(this, valorDiferencajTextField.getText());
                }else {
                    new FrmRecebimentoCartao(this, valorPagarljTextField.getText());
                }
           }
            valorFormajTextField.requestFocus();
            valorFormajTextField.selectAll();
        }
    }//GEN-LAST:event_codigoFormajTextFieldKeyPressed

    private void valorFormajTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_valorFormajTextFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
           int idForma = Integer.parseInt(codigoFormajTextField.getText());
           numeroParcelas = 1;
           for (int i=0;i<listaFormaPagamento.size();i++){
               if (listaFormaPagamento.get(i).getIdformaPagamento()==idForma){
                   this.listaFormaPagamento.get(i).setValor(Formatacao.formatarStringfloat(valorFormajTextField.getText()));
                   this.listaFormaPagamento.get(i).setNumeroParcelas(numeroParcelas);
                   salvarFormaPagamento(listaFormaPagamento.get(i));
                   i = 1000;
               }
           }
           codigoFormajTextField.setText("");
           valorFormajTextField.setText("");
           if (tipoOperacao==1){
                gerarTableModelFormaPagamentoVendas();
            }else if (tipoOperacao==2){
                gerarTableModelFormaPagamentoContasReceber();
            }
           codigoFormajTextField.requestFocus();
           codigoFormajTextField.selectAll();
           if (tipoOperacao==1){
               calcularDiferencaTrocoVenda();
           }else if (tipoOperacao==2){
               calcularDiferencaTrocoContasReceber();
           }
        }
    }//GEN-LAST:event_valorFormajTextFieldKeyPressed

    private void CancelarVendajMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelarVendajMenuItemActionPerformed
        if (this.usuarioLogado.getAcesso().getVendasCancelar() == 0) {
            if (validarCancelamento()){
                IniciarCancelamento();
            }else JOptionPane.showMessageDialog(rootPane, "Acesso Negado");
        }else IniciarCancelamento();
    }//GEN-LAST:event_CancelarVendajMenuItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
       valorAcrescimojTextField.setText("0.00");
       valorDescontojTextField.setText("0.00");
       percentualDescontojTextField.setText("0.00");
       valorPagarljTextField.setText("0.00");
       valorDiferencajTextField.setText("0.00");
       valorTrocojTextField.setText("0.00");
       valorFormajTextField.setText("0.00");
       formaPagamentojPanel.setVisible(false);
       MenuTeclasjPanel.setVisible(true);
       CodigojTextField.requestFocus();
       this.fechamento=0;
       cancelarValorFormaPagamento();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void excluirProdutojMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluirProdutojMenuItemActionPerformed
        if (this.usuarioLogado.getAcesso().getVendasCancelar() == 0) {
            if (validarCancelamento()) {
                if (tipoOperacao == 1) {
                    exlcluirProdutosVenda();
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Acesso Negado");
            }
        } else {
            if (tipoOperacao == 1) {
                exlcluirProdutosVenda();
            }
        }
        
    }//GEN-LAST:event_excluirProdutojMenuItemActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        if (this.listaProdutoVenda.size()>0){
            JOptionPane.showMessageDialog(null, "Existem uma opração não finalziada");
        }else {
            new FrmFechamentoCaixa(this.fechacaixa, this, usuarioLogado);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
       boolean resultado = JOptionPane.showConfirmDialog(null, "Emitir Redução Z", "Atenção", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == 0;
        if (resultado){
            gerarMensagemECF(ecf.reducaoZ(this.config.getEmissorECF().getDataReducaoZ(), this.config));
        }
        codigoFormajTextField.setText("");
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        new FrmMenuFiscal(this.config);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void menuFiscaljMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFiscaljMenuActionPerformed
        if (venda == null) {
            teclaF4 = 4;
        }
    }//GEN-LAST:event_menuFiscaljMenuActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        if (tipoOperacao == 1) {
            try {
                new FrmConsultaProduto(CodigojTextField, this.config);
            } catch (SQLException ex) {
                Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void valorDescontojTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valorDescontojTextFieldFocusGained
        valorDescontojTextField.selectAll();
    }//GEN-LAST:event_valorDescontojTextFieldFocusGained

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        if (formaPagamentojPanel.isVisible()){
            valorDescontojTextField.requestFocus();
        }else {
            JOptionPane.showMessageDialog(null, "Venda não esta sendo finalziada");
        }
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        if (formaPagamentojPanel.isVisible()){
            valorAcrescimojTextField.requestFocus();
        }else {
            JOptionPane.showMessageDialog(null, "Venda não esta sendo finalziada");
        }
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void valorAcrescimojTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valorAcrescimojTextFieldFocusGained
        valorAcrescimojTextField.selectAll();
    }//GEN-LAST:event_valorAcrescimojTextFieldFocusGained

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        if (tipoOperacao == 1) {
            try {
                new FrmSelecionarClienteTerminal(this);
            } catch (Exception ex) {
                Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void CodigojTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CodigojTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CodigojTextFieldActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        new FrmDadosCliente(this);
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        new FrmRetirada(this.fechacaixa, config);
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void percentualDescontojTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_percentualDescontojTextFieldFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_percentualDescontojTextFieldFocusGained

    private void percentualDescontojTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_percentualDescontojTextFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            double percentual = Formatacao.ConvercaoMonetariaDouble(percentualDescontojTextField.getText());
            double valor = Formatacao.ConvercaoMonetariaDouble(valorTotalPagarjTextField.getText());
            if ((percentual > 0) && (valor > 0)) {
                valor = valor * (percentual / 100);
                valorDescontojTextField.setText(Formatacao.foramtarDoubleString(valor));
                this.venda.calcularDesconto(Formatacao.formatarStringfloat(valorDescontojTextField.getText()));
                valorPagarljTextField.setText(Formatacao.foramtarFloatString(this.venda.TotalPagar()));
                if (tipoOperacao == 1) {
                    calcularDiferencaTrocoVenda();
                } else if (tipoOperacao == 2) {
                    calcularDiferencaTrocoContasReceber();
                }
            }
        }
    }//GEN-LAST:event_percentualDescontojTextFieldKeyPressed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
        if (tipoOperacao == 1) {
            String valor = JOptionPane.showInputDialog("Novo Valor para Produto");
            this.novoValor = Formatacao.formatarStringfloat(valor);
        }
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        if (venda == null) {
            if (tipoOperacao == 1) {
                new FrmControleCheques(config, fechacaixa);
            }
        }
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        if(venda==null){
            teclaF4=4;
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        if (venda == null) {
            teclaF4 = 5;
        } 
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed
        new UltimoCupomFiscal(this.mensagemCupom, this.config);
    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        new FrmConsultaClientes(this);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void valorDescontojTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valorDescontojTextFieldFocusLost
        if (tipoOperacao == 1) {
            if (valorDescontojTextField.getText().length() > 0) {
                this.venda.calcularDesconto(Formatacao.formatarStringfloat(valorDescontojTextField.getText()));
                double percentual = this.venda.getVenda().getValorDesconto() * 100;
                percentual = percentual / venda.TotalVenda();
                percentualDescontojTextField.setText(Formatacao.foramtarDoubleString(percentual));
                valorPagarljTextField.setText(Formatacao.foramtarFloatString(this.venda.TotalPagar()));
                calcularDiferencaTrocoVenda();
            } else if (tipoOperacao == 2) {
                calcularDiferencaTrocoContasReceber();
            }
        }
    }//GEN-LAST:event_valorDescontojTextFieldFocusLost

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        imprimirEmissaoPorta();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        String forma = JOptionPane.showInputDialog("Nome da fomra de Pagamento");
        ECFBematech eCFBematech = new ECFBematech();
        eCFBematech.gravarFormaPagamento(forma, "0");
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        String nome = JOptionPane.showInputDialog("Nome do Cliente");
        VendaFacade vendaFacade = new VendaFacade();
        Venda ult_venda = null;
        try {
            ult_venda = vendaFacade.ultimaVendaGravada();
        } catch (Exception ex) {
            Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
        }
        FormaVendaFacade formaVendaFacade = new FormaVendaFacade();
        if (ult_venda != null) {
            try {
                List<Formavenda> listaFormas = formaVendaFacade.consultarFormaVenda(ult_venda.getIdvenda());
                if (listaFormas != null) {
                    if (listaFormas.size() == 2) {
                        listaFormas.get(0).setValorRecebido(listaFormas.get(0).getValorRecebido() + listaFormas.get(1).getValorRecebido());
                        try {
                            formaVendaFacade.gravarFormaVenda(listaFormas.get(0));
                        } catch (Exception ex) {
                            Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        listaFormas.get(1).setValorRecebido(0.0f);
                        try {
                            formaVendaFacade.gravarFormaVenda(listaFormas.get(1));
                        } catch (Exception ex) {
                            Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
         if (this.getTitle().equalsIgnoreCase("Venda de Produtos")){
             this.setTitle("Venda de Produto");
         }else{
             this.setTitle("Venda de Produtos");
         }
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jMenuItem23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem23ActionPerformed
       
    }//GEN-LAST:event_jMenuItem23ActionPerformed

    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        String nomeCliente = JOptionPane.showInputDialog("Nome do Cliente");
        Terminalcliente terminalcliente = new Terminalcliente();
        terminalcliente.setAcrescimo(0.0f);
        terminalcliente.setCondicaoPagamento("A Vista");
        terminalcliente.setEmpresa(config.getEmpresa().getIdempresa());
        terminalcliente.setFormapagamento(1);
        terminalcliente.setIdCliente(0);
        terminalcliente.setIdContasReceber(0);
        terminalcliente.setIdEntrega(0);
        terminalcliente.setNome(nomeCliente);
        terminalcliente.setPercDesconto(0.0f);
        terminalcliente.setValorCompra(this.venda.TotalVenda());
        terminalcliente.setValorDesconto(0.0f);
        terminalcliente.setVendedor(vendedor.getIdvendedor());
        TerminalVendasFacade terminalVendasFacade = new TerminalVendasFacade();
        try {
            terminalcliente = terminalVendasFacade.salvarCliente(terminalcliente);
        } catch (SQLException ex) {
            Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
        }
        for(int i=0;i<listaProdutoVenda.size();i++){
            Terminalproduto terminalproduto = new Terminalproduto();
            terminalproduto.setComplemento("");
            terminalproduto.setPercentualDesconto(0.0f);
            terminalproduto.setProduto(listaProdutoVenda.get(i).getProduto().getIdProduto());
            terminalproduto.setQuantidade(listaProdutoVenda.get(i).getQuantidade());
            terminalproduto.setTerminalcliente(terminalcliente.getIdterminalCliente());
            terminalproduto.setValorColorante(0.0);
            terminalproduto.setValorUnitario(listaProdutoVenda.get(i).getValorUnitario());
            terminalproduto.setVendedor(1);
            try {
                terminalVendasFacade.salvarProduto(terminalproduto);
            } catch (SQLException ex) {
                Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        IniciarCancelamento();
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    /**
     * @param args the command line arguments
     */

    public void gerarTableModelFormaPagamentoVendas(){       
        FormaPagamentoController formaPagamentoController = new FormaPagamentoController();
        listaFormaPagamento = formaPagamentoController.getFormaPagamento();
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);
        modelForma = new FormaPagamentoTableModel(this.listaFormaPagamento);
        this.setLocationRelativeTo(this);
        formaPagamentojTable1.setModel(modelForma);
        formaPagamentojTable1.getColumnModel().getColumn(0).setPreferredWidth(10);
        formaPagamentojTable1.getColumnModel().getColumn(1).setPreferredWidth(50);
        formaPagamentojTable1.getColumnModel().getColumn(2).setCellRenderer(renderer);
        formaPagamentojTable1.getColumnModel().getColumn(2).setPreferredWidth(20);
        formaPagamentojTable1.repaint();
        formaPagamentojPanel.setVisible(false);
        formaPagamentojPanel.setVisible(true);
        MenuTeclasjPanel.setVisible(false);
        valorTotalPagarjTextField.setText(Formatacao.foramtarFloatString(this.venda.TotalVenda()));
        float valorDesconto = this.venda.getVenda().getValorDesconto();
        float valor = this.venda.TotalVenda() - valorDesconto;
        valorPagarljTextField.setText(Formatacao.foramtarFloatString(valor));
    }
    
    public void gerarTableModelFormaPagamentoContasReceber(){ 
        FormaPagamentoController formaPagamentoController = new FormaPagamentoController();
        listaFormaPagamento = formaPagamentoController.getFormaPagamento();
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);
        modelForma = new FormaPagamentoTableModel(this.listaFormaPagamento);
        this.setLocationRelativeTo(this);
        formaPagamentojTable1.setModel(modelForma);
        formaPagamentojTable1.getColumnModel().getColumn(0).setPreferredWidth(10);
        formaPagamentojTable1.getColumnModel().getColumn(1).setPreferredWidth(50);
        formaPagamentojTable1.getColumnModel().getColumn(2).setCellRenderer(renderer);
        formaPagamentojTable1.getColumnModel().getColumn(2).setPreferredWidth(20);
        formaPagamentojTable1.repaint();
        formaPagamentojPanel.setVisible(false);
        formaPagamentojPanel.setVisible(true);
        MenuTeclasjPanel.setVisible(false);
        valorTotalPagarjTextField.setText(Formatacao.foramtarDoubleString(recebimentoBean.getValorContas()));
        valorPagarljTextField.setText(Formatacao.foramtarDoubleString(recebimentoBean.getValorContas() - recebimentoBean.getValorCredito()));
    }

    public void calcularDiferencaTrocoVenda() {
        float diferenca = this.venda.CalcularDiferenca(listaFormaPagamento);
        if (diferenca <= 0) {
            valorTrocojTextField.setText(Formatacao.foramtarFloatString(this.venda.calculcarTroco(listaFormaPagamento)));
            valorDiferencajTextField.setText("0,00");
        } else if (diferenca > 0) {
            valorDiferencajTextField.setText(Formatacao.foramtarFloatString(diferenca));
            valorTrocojTextField.setText("0,00");
        }
        codigoFormajTextField.requestFocus();
    }
    
    public void calcularDiferencaTrocoContasReceber() {
        double  diferenca = 0;
        double valorDesconto = Formatacao.formatarStringDouble(valorDescontojTextField.getText());
        double valorPago=0;
        for(int i=0;i<listaFormaPagamento.size();i++){
             valorPago = valorPago + listaFormaPagamento.get(i).getValor();
        }
        
        valorPago = valorPago + recebimentoBean.getValorCredito() + valorDesconto;
        diferenca =  valorPago - recebimentoBean.getValorContas();
        if (diferenca > 0) {
            valorTrocojTextField.setText(Formatacao.foramtarDoubleString(valorPago - recebimentoBean.getValorContas()));
            valorDiferencajTextField.setText("0,00");
        } else if (diferenca <= 0) {
            valorDiferencajTextField.setText(Formatacao.foramtarDoubleString(diferenca));
            valorTrocojTextField.setText("0,00");
        }
        codigoFormajTextField.requestFocus();
    }

    public void finalizarTelaVendas(){
        tipoOperacao=1;
        CodigojTextField.setEditable(true);
        CodigojTextField.setText("");
        formaPagamentojPanel.setVisible(false);
        MenuTeclasjPanel.setVisible(true);
        MenuTeclasjPanel.repaint();
        QuantidadejFormattedTextField.setText("1.00");
        ValorUnitariojTextField.setText("0.00");
        SubTotaljTextField.setText("0.00");
        valorTotalPagarjTextField.setText("0.00");
        valorTotalPagarjTextField.setText("0.00");
        valorPagarljTextField.setText("0.00");
        valorAcrescimojTextField.setText("0.00");
        valorDescontojTextField.setText("0.00");
        percentualDescontojTextField.setText("0.00");
        valorPagarljTextField.setText("0.00");
        valorDiferencajTextField.setText("0.00");
        valorTrocojTextField.setText("0.00");
        valorFormajTextField.setText("0.00");
        this.listaProdutoVenda = new ArrayList<ProdutoVenda>();
         model = new TelaVendaTableModel(this.listaProdutoVenda);
         gerarJTable();
         this.fechamento =0;
         this.venda = null;
         this.mensagemCupom =" ";
         teclaF4=0;
         CodigojTextField.requestFocus();
         this.devolucao=0;
         cancelarValorFormaPagamento();
    }

    public void gerarJTable(){
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);
        jTableVenda.setModel(model);
        jTableVenda.setColumnSelectionAllowed(true);
        jTableVenda.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableVenda.setShowVerticalLines(false);
        jTableVenda.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableVenda);
        jTableVenda.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableVenda.getColumnModel().getColumn(0).setResizable(false);
        jTableVenda.getColumnModel().getColumn(0).setPreferredWidth(10);
        jTableVenda.getColumnModel().getColumn(1).setResizable(false);
        jTableVenda.getColumnModel().getColumn(1).setPreferredWidth(20);
        jTableVenda.getColumnModel().getColumn(2).setPreferredWidth(20);
        jTableVenda.getColumnModel().getColumn(3).setResizable(false);
        jTableVenda.getColumnModel().getColumn(3).setPreferredWidth(400);
        jTableVenda.getColumnModel().getColumn(4).setResizable(false);
        jTableVenda.getColumnModel().getColumn(4).setPreferredWidth(10);
        jTableVenda.getColumnModel().getColumn(5).setCellRenderer(renderer);
        jTableVenda.getColumnModel().getColumn(5).setResizable(false);
        jTableVenda.getColumnModel().getColumn(5).setPreferredWidth(10);
        jTableVenda.getColumnModel().getColumn(6).setCellRenderer(renderer);
        jTableVenda.getColumnModel().getColumn(6).setResizable(false);
        jTableVenda.getColumnModel().getColumn(6).setPreferredWidth(10);
        jTableVenda.getColumnModel().getColumn(7).setCellRenderer(renderer);
        jTableVenda.getColumnModel().getColumn(7).setResizable(false);
        jTableVenda.getColumnModel().getColumn(7).setPreferredWidth(10);
    }


    public void gerarMensagemECF(String msg){
        if (msg!=null){
            JOptionPane.showMessageDialog(null, msg);
        }
    }

    
    
    public void getVendedor(int idVendedor){
        VendedorFacade vendedorFacade = new VendedorFacade();
        try {
            this.vendedor = vendedorFacade.consultarVendedor(idVendedor);
        } catch (Exception ex) {
            Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem CancelarVendajMenuItem;
    private javax.swing.JTextField CodigojTextField;
    private javax.swing.JPanel MenuTeclasjPanel;
    private javax.swing.JFormattedTextField QuantidadejFormattedTextField;
    private javax.swing.JTextField SubTotaljTextField;
    private javax.swing.JTextField ValorUnitariojTextField;
    private javax.swing.JTextField codigoFormajTextField;
    private javax.swing.JMenuItem confirmarVendajMenuItem;
    private javax.swing.JTextField descricaoFormajTextField;
    private javax.swing.JLabel ecfjLabel3;
    private javax.swing.JMenuItem excluirProdutojMenuItem;
    private javax.swing.JPanel formaPagamentojPanel;
    private javax.swing.JTable formaPagamentojTable1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableVenda;
    private javax.swing.JMenu menuFiscal02jMenu;
    private javax.swing.JMenu menuFiscaljMenu;
    private javax.swing.JLabel modeloECFjLabel;
    private javax.swing.JLabel operadorjLabel2;
    private javax.swing.JTextField percentualDescontojTextField;
    private javax.swing.JLabel sistemajLabel;
    private javax.swing.JLabel valorAcrescimojLabel;
    private javax.swing.JTextField valorAcrescimojTextField;
    private javax.swing.JTextField valorDescontojTextField;
    private javax.swing.JTextField valorDiferencajTextField;
    private javax.swing.JTextField valorFormajTextField;
    private javax.swing.JTextField valorPagarljTextField;
    private javax.swing.JTextField valorTotalPagarjTextField;
    private javax.swing.JTextField valorTrocojTextField;
    // End of variables declaration//GEN-END:variables

    public void finalizarCadastroTeminalCliente() {
        this.finalizarTelaVendas();
    }

    public void finalizarBuscaTerminalCliente(Terminalcliente terminalCliente) {
        if (this.venda == null) {
            teclaF4 = 4;
            this.vendedor = buscarVendedor(terminalCliente.getVendedor());
            venda = new Vendas(config, this.fechacaixa, this.vendedor, teclaF4, this.fechamento, this.devolucao);
            venda.setIdCliente(terminalCliente.getIdCliente());
            venda.setIdContasReceber(terminalCliente.getIdContasReceber());
            venda.setIdEntrega(terminalCliente.getIdEntrega());
            if (this.getTitle().equalsIgnoreCase("Venda de Produto")){
                teclaF4=4;
            }
            if (venda.getIdCliente()>0){
                if (config.getPortaSerial().equalsIgnoreCase("1")){
                    teclaF4=4;
                }else teclaF4=4;
            }
            if (venda.getIdEntrega()>0){
                teclaF4=4;
            }
            if (teclaF4 > 0) {
                gerarMensagemECF(ecf.abreCupomFiscal());
            }
        }
        TerminalVendasFacade terminalVendasFacade = new TerminalVendasFacade();
        List<Terminalproduto>  listaTerminalProduto = null;
        try {
            listaTerminalProduto = terminalVendasFacade.consultaTerminalProduto(terminalCliente);
        } catch (SQLException ex) {
            Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (int i=0;i<listaTerminalProduto.size();i++){
            Terminalproduto terminalProduto = listaTerminalProduto.get(i);
            try {
                venda.vendeItem(buscarProduto(terminalProduto.getProduto()).getReferencia(), terminalProduto.getQuantidade(), this.config.getEmpresa().getIdempresa(), terminalProduto.getValorUnitario(), terminalProduto.getValorColorante().floatValue(), terminalProduto.getPercentualDesconto(), terminalProduto.getVendedor());
                if ((teclaF4 > 0)){
                    gerarMensagemECF(ecf.vendeItem(this.venda.retornaUltimaItemVendido(), config.getMarcarimpressora()));
                }
                ValorUnitariojTextField.setText(Formatacao.foramtarFloatString(venda.getListaProdutoVenda().get(venda.getListaProdutoVenda().size() - 1).getValorUnitario()));
                SubTotaljTextField.setText(Formatacao.foramtarFloatString(venda.TotalVenda()));
                CodigojTextField.setText(null);
                this.listaProdutoVenda = venda.getListaProdutoVenda();
                model = new TelaVendaTableModel(this.listaProdutoVenda);
                gerarJTable();
                quantidadeVenda = 1.0;
                terminalVendasFacade.excluirTerminalProduto(terminalProduto);
            } catch (Exception ex) {
                Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
            }
        }   
        try {
            terminalVendasFacade.excluirTerminalCliente(terminalCliente);
        } catch (SQLException ex) {
            Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void mensagemCupomFiscal(String msg1, String msg2, String msg3) {
        this.mensagemCupom = "";
        String espacos = "                                                ";
        if (msg1.length()<48){
            this.mensagemCupom = msg1 + espacos.substring(0, (48-msg1.length())) + "\r\n";
        }else {
            this.mensagemCupom = msg1 + "\r\n";
        }
        if (msg2.length()<48){
            this.mensagemCupom = this.mensagemCupom + msg2 + espacos.substring(0, (48-msg2.length())) + "\r\n";
        }else {
            this.mensagemCupom = this.mensagemCupom + msg2 + "\r\n";
        }
        if (msg3.length()<48){
            this.mensagemCupom = this.mensagemCupom +  msg3 + espacos.substring(0, (48-msg3.length())) + "\r\n";
        }else {
            this.mensagemCupom = this.mensagemCupom + msg3 + "\r\n";
        }
        this.mensagemCupom = this.mensagemCupom + "Obrigado, volte sempre !!!";
    }
    
    public boolean verificarFormaPagamento(){
        float valor =0;
        for (int i=0;i<this.listaFormaPagamento.size();i++){
            valor = valor + listaFormaPagamento.get(i).getValor();
        }
        float valorDesconto = Formatacao.ConvercaoMonetariaFloat(valorDescontojTextField.getText());
        float valorAcrecimo = Formatacao.ConvercaoMonetariaFloat(valorAcrescimojTextField.getText());
        valor = (valor + valorAcrecimo) + valorDesconto;
        float valorPagar = Formatacao.ConvercaoMonetariaFloat(valorTotalPagarjTextField.getText());
        if (valorPagar>valor){
            return false;
        }else {
            valor = this.listaFormaPagamento.get(0).getValor() - Formatacao.ConvercaoMonetariaFloat(valorTrocojTextField.getText());
            this.listaFormaPagamento.get(0).setValor(valor);
            return true;
        }
    }
    
    public void iniciarFormaPagamentoVendas() {
        gerarTableModelFormaPagamentoVendas();
        codigoFormajTextField.requestFocus();
        codigoFormajTextField.selectAll();
        valorAcrescimojLabel.setText("Valor Acrescimo");
        ValorUnitariojTextField.setText("0,00");
        if (this.venda.getValorDesconto()>0){
            valorDescontojTextField.setText(Formatacao.foramtarFloatString(this.venda.getValorDesconto()));
            calcularValorDesconto();
        }else {
            valorDescontojTextField.setText("0,00");
        }
        this.fechamento = 1;
    }
    
    public void iniciarFormaPagamentoContasReceber() {
        FormaPagamentoFacade formaPagamentoFacade = new FormaPagamentoFacade();
        try {
            this.listaFormaPagamento = formaPagamentoFacade.getFormaPagamento();
        } catch (SQLException ex) {
            Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
        }
        gerarTableModelFormaPagamentoContasReceber();
        codigoFormajTextField.requestFocus();
        codigoFormajTextField.selectAll();
        valorAcrescimojLabel.setText("Valor Creditos");
        valorAcrescimojTextField.setText(Formatacao.foramtarDoubleString(recebimentoBean.getValorCredito()));
        valorDescontojTextField.setText("0,00");
        this.fechamento = 1;
    }
    
    public void finalizarDevolucao(){
        Devolucoes devolucoes = new Devolucoes( this.fechamento, this.devolucao, config.getEmpresa().getIdempresa());
        devolucoes.setListaProdutoDevolucao(this.venda.getListaProdutoVenda());
        try {
            devolucoes.FinalizarDevolucao(this.fechacaixa);
            CodigojTextField.setBackground(Color.WHITE);
            this.setTitle("Venda de Produtos");
            finalizarTelaVendas();
            this.devolucao=0;
        } catch (Exception ex) {
            Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void concluirRecebimento(){
        Cliente cliente=null;
        if (verificarFormaPagamento()) {
            if (teclaF4 > 0) {
                if (venda.getIdCliente()>0){
                    ClienteController clienteController = new ClienteController();
                    cliente = clienteController.consultarClienteId(venda.getIdCliente());
                    mensagemCupomFiscal(cliente.getNome(), cliente.getDocFederal()," ");
                }
                venda.calcularValorTributos();
                String msg = "Trib. aprox. R$: " + Formatacao.foramtarDoubleString(venda.getValorTributoFederal()) + " Federal e " 
                    + Formatacao.foramtarDoubleString(venda.getValorTributoEstadual()) + " Estadual "  + "   Fonte IBPT ca7gi3 \r\n";
                this.mensagemCupom = msg + mensagemCupom;
                new CupomFiscal().fecharCupom(venda, ecf, Formatacao.ConvercaoMonetariaFloat(valorDescontojTextField.getText()),
                        listaFormaPagamento, mensagemCupom, config.getMarcarimpressora());
                this.venda.getVenda().setEmissorecf(config.getEmissorECF().getIdEmissorECF());
                this.venda.getVenda().setNumeroECF(ecf.numeroCupom());
                try {
                    if (teclaF4==4){
                        this.venda.FinalizarVenda(Formatacao.formatarStringfloat(valorDescontojTextField.getText()), Formatacao.formatarStringfloat(valorAcrescimojTextField.getText()), this.listaFormaPagamento, true, Formatacao.formatarStringfloat(percentualDescontojTextField.getText()), this.config.getEmpresa().getIdempresa());
                        if (venda.getIdCliente()>0){
                            gravarVendaPrazoCupomFiscal();
                        }
                        if (venda.getIdEntrega()>0){
                            finalizarEntrega();
                        }
                    }else if (teclaF4==5){
                        this.venda.FinalizarVendaSomenteCupom(Formatacao.formatarStringfloat(valorDescontojTextField.getText()), Formatacao.formatarStringfloat(valorAcrescimojTextField.getText()), this.listaFormaPagamento);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.fechamento = 0;
                finalizarTelaVendas();
            }  else if (teclaF4 == 0) {
                venda.calcularValorTributos();
                this.venda.getVenda().setEmissorecf(config.getEmissorECF().getIdEmissorECF());
                try {
                    int idcliente = venda.getIdCliente();
                    this.venda.FinalizarVenda(Formatacao.formatarStringfloat(valorDescontojTextField.getText()), Formatacao.formatarStringfloat(valorAcrescimojTextField.getText()), this.listaFormaPagamento, false, Formatacao.formatarStringfloat(percentualDescontojTextField.getText()), config.getEmpresa().getIdempresa());
                    if (idcliente>0){
                        imprimirVendaPrazo(cliente);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.fechamento = 0;
                this.trocoDevolucao = Formatacao.formatarStringDouble(valorTrocojTextField.getText());
                finalizarTelaVendas();
            }
        }else {
            JOptionPane.showMessageDialog(null, "Erro no recebimento");
        }
    }
    
    public void gerarQuantidadeCodigo(){
        char flag = 'a';
        String quantidade = "";
        String nTexto = "";
        String texto = CodigojTextField.getText();
        for (int i=0;i<texto.length();i++){
            flag = texto.charAt(i);
            if (flag=='*'){
                quantidade = nTexto;
                nTexto="";
            }else {
                nTexto= nTexto + flag;
            }
        }
        if (quantidade.equalsIgnoreCase("")){
            quantidade="1";
            QuantidadejFormattedTextField.setText(quantidade);
            CodigojTextField.setText(nTexto);
            quantidadeVenda = Formatacao.ConvercaoMonetariaDouble(quantidade);
        }else {
            QuantidadejFormattedTextField.setText(quantidade);
            CodigojTextField.setText(nTexto);
            quantidadeVenda = Formatacao.ConvercaoMonetariaDouble(quantidade);
        }   
    }
    
    public Vendedor buscarVendedor(int idVendedor){
        VendedorFacade vendedorFacade = new VendedorFacade();
        try {
            return  vendedorFacade.consultarVendedor(idVendedor);
        } catch (Exception ex) {
            Logger.getLogger(TerminalVendasTableModel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Erro consultar Vendedor");
            return null;
        }
        
    }
    
    public Produto buscarProduto(int idProduto){
        ProdutoFacade produtoFacade = new ProdutoFacade();
        try {
            return produtoFacade.getProduto(idProduto);
        } catch (Exception ex) {
            Logger.getLogger(UltimoCupomFiscal.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Erro consultar Produto");
            return null;
        }
    } 
    
    public String buscarAliquotaICMS(int idAliquota){
        AliquotaFacade aliquotaFacade = new AliquotaFacade();
        try {
            String aliquota = aliquotaFacade.getAliquota(idAliquota).getDescricao();
            return aliquota.substring(1, 2);
        } catch (SQLException ex) {
            Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Erro Consultar Aliquota");
            return null;
        }
    }
    
    public Double buscarValorCompra(int idProduto){
        EstoqueFacade estoqueFacade = new EstoqueFacade();
        try {
            return estoqueFacade.getEstoque(idProduto, this.config.getEmpresa().getIdempresa()).getValorCusto().doubleValue();
        } catch (Exception ex) {
            Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane," Erro Consultar Valor compra");
            return 0.0;
        }
    }

    public void consultarClienteRecebimneto(Cliente clinte) {
        if (clinte!=null){
            new FrmConsultarContasReceber(clinte, this, config);
        }
    }
    
    

    public void consultarListarContasReceber(List<ContasReceberBean> listaContasReceber, List<CreditoBean> listaCreditosReceber, Cliente cliente) {
        this.recebimentoBean = new RecebimentoBean(cliente, listaContasReceber, listaCreditosReceber, this.fechacaixa);
        carregarContasReceberModel();
        tipoOperacao = 2;
        CodigojTextField.setEditable(false);
    }

    
    public void carregarContasReceberModel(){
        modelContasReceber = new ConsultaContasReceberTableModel(recebimentoBean.getListaContasReceber());
        
        
        
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.RIGHT);
        
        jTableVenda.setModel(modelContasReceber);
        jTableVenda.getColumnModel().getColumn(0).setPreferredWidth(40);
        jTableVenda.getColumnModel().getColumn(1).setPreferredWidth(60);
        jTableVenda.getColumnModel().getColumn(2).setCellRenderer(renderer);
        jTableVenda.getColumnModel().getColumn(2).setPreferredWidth(50);
        jTableVenda.getColumnModel().getColumn(3).setPreferredWidth(60);
        jTableVenda.getColumnModel().getColumn(4).setPreferredWidth(10);
        jTableVenda.repaint();
    }
    
    private void cancelarOperacaoVenda(){
        if (teclaF4>0){
            gerarMensagemECF(ecf.cancelaCupomFiscal());
        }
        if (this.devolucao==1){
            this.devolucao=0;
            CodigojTextField.setBackground(Color.WHITE);
            this.setTitle("Venda de Produtos");
        }
        finalizarTelaVendas();
    }
    
    public void cancelarOperacaoContasReeber() {
        recebimentoBean = null;
        finalizarTelaVendas();
    }
    
    private void exlcluirProdutosVenda(){
       int i=0;
       if (i<= this.venda.getListaProdutoVenda().size() && (this.venda.getListaProdutoVenda().size()>1)){
           i = Integer.parseInt(JOptionPane.showInputDialog("Informe o Número do Item"));
           this.venda.excluirItemVenda(i-1);
           SubTotaljTextField.setText(Formatacao.foramtarFloatString(venda.TotalVenda()));
           this.listaProdutoVenda = venda.getListaProdutoVenda();
           model = new TelaVendaTableModel(this.listaProdutoVenda);
           gerarJTable();
           if (teclaF4>0){
                gerarMensagemECF(ecf.cancelaItemGenerico(String.valueOf(i)));
           }
       }else {
           JOptionPane.showMessageDialog(null, "Lista de vendas so possui 1 item");
       }
    }
    
    private void confimarOperacaoVendas(){
        if ((this.listaProdutoVenda.size() > 0) && (this.fechamento==0)){
            iniciarFormaPagamentoVendas();
            if (venda.getIdCliente()>0){
                gerarFormaPagamentoContasReceber();
            }
        }else if ((this.fechamento==1) && (this.devolucao==1)){
            finalizarDevolucao();
        }else if ((this.fechamento==1) && (this.devolucao==0)){
            concluirRecebimento();
        }
    }
    
    private void confirmarOperacaoContasReceber(){
        if ((this.recebimentoBean.getListaContasReceber().size() > 0) && (this.fechamento == 0)) {
            iniciarFormaPagamentoContasReceber();
        } else if ((this.fechamento == 1) && (this.devolucao == 0)) {
            if (verificarFormaPagamento()) {
                float valorTroco = Formatacao.ConvercaoMonetariaFloat(valorTrocojTextField.getText());
                this.recebimentoBean.concluirRecebimentoContasReceber(listaFormaPagamento, Formatacao.formatarStringDouble(valorDescontojTextField.getText()), valorTroco, config.getEmpresa().getIdempresa());
                emtirComprovantePagamentoConta();
                finalizarTelaVendas();
            } else {
                JOptionPane.showMessageDialog(null, "Erro no recebimento");
            }
        }
    }
    
    public void IniciarCancelamento() {
        if (tipoOperacao == 1) {
            cancelarOperacaoVenda();
        } else if (tipoOperacao == 2) {
            cancelarOperacaoContasReeber();
        }
    }
    
    public boolean validarCancelamento() {
        JLabel label = new JLabel("Digite a senha:");
        JPasswordField jpf = new JPasswordField();
        JOptionPane.showConfirmDialog(null,
                new Object[]{label, jpf}, "Senha de Liberação:",
                JOptionPane.OK_CANCEL_OPTION);
        jpf.requestFocus();
        String senha = Formatacao.criptografarSenha(jpf.getPassword());
        UsuariosController usuariosController = new UsuariosController();
        Usuarios usuario = new Usuarios();
        usuario = usuariosController.consultarUsuario(senha);
        if (usuario != null) {
            AcessoController acessoController = new AcessoController();
            Acesso acesso = acessoController.getAcessoUsuario(usuario.getIdusuarios());
            if (acesso != null) {
                if (acesso.getVendasCancelar() == 1) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    public void gerarFormaPagamentoCartao() {
        if (tipoOperacao==1){
            gerarTableModelFormaPagamentoVendas();
            calcularDiferencaTrocoVenda();
        }else if (tipoOperacao==2){
            gerarTableModelFormaPagamentoContasReceber();
            calcularDiferencaTrocoContasReceber();
        }

    }
    
    public void salvarFormaPagamento(Formapagamento formapagamento){
        FormaPagamentoController formaPagamentoController = new FormaPagamentoController();
        formaPagamentoController.salvarFormapagamento(formapagamento);
    }
    
    public void cancelarValorFormaPagamento(){
        List<Formapagamento> listaformaCancelar = new ArrayList<Formapagamento>();
        FormaPagamentoController formaPagamentoController = new FormaPagamentoController();
        listaformaCancelar = formaPagamentoController.listarFormaPagamentoValor();
        for(int i=0;i<listaformaCancelar.size();i++){
            listaformaCancelar.get(i).setValor(0.0f);
            listaformaCancelar.get(i).setNumeroParcelas(0);
            salvarFormaPagamento(listaformaCancelar.get(i));
        }
        codigoFormajTextField.setText("");
        descricaoFormajTextField.setText("");
    }
    
    public void imprimirEmissaoPorta(){
        VendaController vendaController = new VendaController();
        Venda vendaEmissao = vendaController.ultimaVendaGravada();
        if (vendaEmissao!=null){
            ImprimirEmissao imprimirEmissao = new ImprimirEmissao(vendaEmissao, config.getPortaParalela());
        }
    }
    
    public void imprimirVendaPrazo(Cliente cliente){
        if (this.venda!=null){
            ImprimirVendaPrazo imprimirVendaPrazo = new ImprimirVendaPrazo(venda.getVenda(), config.getPortaParalela(), cliente);
        }
    }
    
    public void calcularValorDesconto() {
        if (tipoOperacao == 1) {
            this.venda.calcularDesconto(Formatacao.formatarStringfloat(valorDescontojTextField.getText()));
            double percentual = this.venda.getVenda().getValorDesconto() * 100;
            percentual = percentual / venda.TotalVenda();
            percentualDescontojTextField.setText(Formatacao.foramtarDoubleString(percentual));
            valorPagarljTextField.setText(Formatacao.foramtarFloatString(this.venda.TotalPagar()));
            calcularDiferencaTrocoVenda();
        } else if (tipoOperacao == 2) {
            calcularDiferencaTrocoContasReceber();
        }
    }
    
    public String verificarCodigoBarras(String barras){
        CodigoBarrasController codigoBarrasController = new CodigoBarrasController();
        CodigoBarras codigoBarras = codigoBarrasController.pesquisarCodigo(barras);
        if (codigoBarras!=null){
            ProdutoFacade produtoFacade = new ProdutoFacade();
            try {
                Produto produto = produtoFacade.getProduto(codigoBarras.getProduto());
                if (produto!=null){
                    return String.valueOf(produto.getReferencia());
                }
            } catch (Exception ex) {
                Logger.getLogger(FrmTelaVenda.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(rootPane, "Erro consultar Produtos codigo Barras" + ex);
            }
        }else {
            JOptionPane.showMessageDialog(rootPane, "Cóidgo Barras não Localizado");
        }
        return "0";
    }
    
    public void gerarFormaPagamentoContasReceber() {
        for (int i = 0; i < listaFormaPagamento.size(); i++) {
            if (listaFormaPagamento.get(i).getIdformaPagamento() == 8) {
                this.listaFormaPagamento.get(i).setValor(venda.TotalVenda());
                this.listaFormaPagamento.get(i).setNumeroParcelas(1);
                salvarFormaPagamento(listaFormaPagamento.get(i));
                i = 1000;
            }
        }
        codigoFormajTextField.setText("");
        valorFormajTextField.setText("");
        gerarTableModelFormaPagamentoVendas();
        codigoFormajTextField.requestFocus();
        codigoFormajTextField.selectAll();
        calcularDiferencaTrocoVenda();
    }
    
    public void emitirComprovanteVendaPrazo(){
        String texto="            Comprovante de Venda a Prazo\r\n";
        ClienteController clienteController = new ClienteController();
        Cliente cliente = clienteController.consultarClienteId(venda.getIdCliente());
        texto=texto + "Cliente : " + String.valueOf(cliente.getIdcliente()) +  " - " + cliente.getNome() + "\r\n";
        texto=texto + "Data....: "  + Formatacao.ConvercaoDataPadrao(new Date()) + "\r\n";
        texto=texto + "Nº Cupom: "  + venda.getVenda().getNumeroECF() + "\r\n";
        texto=texto + "Vendedor: " + String.valueOf(vendedor.getIdvendedor()) + " - "  + this.vendedor.getNome() + "\r\n";
        texto=texto + "Valor R$: " + Formatacao.foramtarFloatString(this.venda.TotalVenda()) + "\r\n";
        texto=texto+"\r\n";
        texto=texto+"\r\n";
        texto=texto+"\r\n";
        texto=texto+"\r\n";
        texto=texto+"\r\n";
        texto=texto+"\r\n";
        texto=texto+"\r\n";
        texto=texto+"\r\n";
        texto=texto+"     ------------------------------\r\n";
        texto=texto+"                  Assinatura";
        ecf.abreRelatorioGerencial(texto);
        ecf.fechaRelatorioGererncial();
    }
    
    public void gravarVendaPrazoCupomFiscal(){
        ContasReceberController contasReceberController = new ContasReceberController();
        Contasreceberprodutos contasreceberprodutos = new Contasreceberprodutos();
        contasreceberprodutos.setContasreceber(venda.getIdContasReceber());
        contasreceberprodutos.setVenda(venda.getVenda().getIdvenda());
        contasReceberController.salvarContasReceberProduto(contasreceberprodutos);
        emitirComprovanteVendaPrazo();
    }
    
    public void emtirComprovantePagamentoConta(){
        String texto="        Comprovante de Pagamento\r\n";
        texto=texto+"           Pagamento Nº " +  String.valueOf(this.recebimentoBean.getIdPagamento()) + "\r\n";
        texto=texto + "Cliente : " + String.valueOf(this.recebimentoBean.getClienteRecebimento().getIdcliente()) +  " - " + this.recebimentoBean.getClienteRecebimento().getNome() + "\r\n";
        texto=texto + "Data....: "  + Formatacao.ConvercaoDataPadrao(new Date()) + "\r\n";
        texto=texto + "Op.Caixa: " + usuarioLogado.getUsuario().getNome() + "\r\n";
        Double valorPago = this.recebimentoBean.getValorContas();
        Double valorCredito = this.recebimentoBean.getValorCredito();
        Double valorDesconto = Formatacao.ConvercaoMonetariaDouble(valorDescontojTextField.getText());
        texto=texto + "Total Contas   R$: " + Formatacao.foramtarDoubleString(this.recebimentoBean.getValorContas()) + "\r\n";
        texto=texto + "Total Credito  R$: " + Formatacao.foramtarDoubleString(this.recebimentoBean.getValorCredito()) + "\r\n";
        texto=texto + "Valor Desconto R$: " + Formatacao.foramtarDoubleString(valorDesconto) + "\r\n";
        texto=texto + "Valor Pago     R$: " + Formatacao.foramtarDoubleString(valorPago - (valorCredito + valorDesconto)) + "\r\n";
        texto=texto+"\r\n";
        texto=texto+"--------------------------------------------\r\n";
        texto=texto+"\r\n";
        texto=texto+"\r\n";
        texto=texto+"\r\n";
        texto=texto+"\r\n";
        texto=texto+"\r\n";
        texto=texto+"     ------------------------------\r\n";
        texto=texto+"                  Assinatura";
        ecf.abreRelatorioGerencial(texto);
        ecf.fechaRelatorioGererncial();   
    }
    
    public void finalizarEntrega() {
        EntregaController entregaController = new EntregaController();
        Entrega entrega = entregaController.salvar(venda.getIdEntrega(), this.fechacaixa.getIdfechaCaixa());
        if (entrega != null) {
            String texto = "        Comprovante de Entrega\r\n";
            texto = texto + "Entrega Nº " + String.valueOf(this.venda.getIdEntrega()) + "\r\n";
            texto = texto + "Data....: " + Formatacao.ConvercaoDataPadrao(entrega.getDataCompra()) + "\r\n";
            texto = texto + "Op.Caixa: " + usuarioLogado.getUsuario().getNome() + "\r\n";
            Double valorPago = entrega.getValorPagar();
            Double valorDesconto = Formatacao.ConvercaoMonetariaDouble(valorDescontojTextField.getText());
            texto = texto + "Valor Total    R$: " + Formatacao.foramtarDoubleString(valorPago) + "\r\n";
            texto = texto + "Valor Desconto R$: " + Formatacao.foramtarDoubleString(valorDesconto) + "\r\n";
            texto = texto + "Valor Pago     R$: " + Formatacao.foramtarDoubleString(valorPago - valorDesconto) + "\r\n";
            texto = texto + "\r\n";
            ecf.abreRelatorioGerencial(texto);
            ecf.fechaRelatorioGererncial();
            ecf.abreRelatorioGerencial(texto);
            ecf.fechaRelatorioGererncial();
        }
    }
}
